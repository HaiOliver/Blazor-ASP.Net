@page "/students"
@inject HttpClient httpClient

<h1>Students</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="@Add" class="btn btn-success">Add</button>
    <table class='table table-hover'>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>BCIT ID</th>
                <th>Phone</th>
                <th>Email</th>
                <th>City</th>
                <th>Option</th>
                <th>Set</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in students)
            {
            <tr>
                <td>@item.StudentId</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.BCIT_ID </td>
                <td>@item.Email </td>
                <td>@item.MobileNumber</td>
                <td>@item.City </td>
                <td>@item.Option</td>
                <td>@item.Set</td>
                <td><a class="btn btn-success btn-sm" @onclick="@(() => ShowEdit(item.StudentId))">edit</a></td>
                <td><a class="btn btn-danger btn-sm" @onclick="@(() => ShowDelete(item.StudentId))">del</a></td>


            </tr>
            }
        </tbody>
    </table>
}

//======================ADD=======================================================================

@if (students != null && mode == MODE.Add) // Insert form
{
    <EditForm Model="@student" OnValidSubmit="@HandleAdd">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText placeholder="First Name" id="FirstName" @bind-Value="@student.FirstName" />
        <br />
        <InputText placeholder="Last Name" id="LastName" @bind-Value="@student.LastName" />
        <br />
        <InputText placeholder="BCIT_ID" id="BCIT_ID" @bind-Value="@student.BCIT_ID" />
        <br />
        <InputText placeholder="Email" id="Email" @bind-Value="@student.Email" />
        <br />
        <InputText placeholder="Phone" id="MobileNumber" @bind-Value="@student.MobileNumber" />
        <br />
        <InputText placeholder="Option" id="Option" @bind-Value="@student.Option" />
        <br />
        <InputText placeholder="Set" id="Set" @bind-Value="@student.Set" />
        <br />
        <InputText placeholder="City" id="City" @bind-Value="@student.City" />
        <br />
        <button type="submit">Submit</button>
    </EditForm>

    @code {
        private Student student = new Student();

        private async void HandleAdd()
        {
            string endpoint = $"{baseUrl}api/students";

            student.StudentId = Guid.NewGuid().ToString();

            await httpClient.PostAsJsonAsync(endpoint, student);

            await load();
            StateHasChanged(); // causes the page to get automatically refreshed
        }
    }
}

//========================EDIT=================================================================
@if (students != null && mode == MODE.Edit) // Update
{
<EditForm Model="@student" OnValidSubmit="@HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="FirstName" @bind-Value="@student.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="LastName" @bind-Value="@student.LastName" />
    <br />
    <InputText placeholder="BCIT_ID" id="BCIT_ID" @bind-Value="@student.BCIT_ID" />
    <br />
    <InputText placeholder="Email" id="Email" @bind-Value="@student.Email" />
    <br />
    <InputText placeholder="Phone" id="MobileNumber" @bind-Value="@student.MobileNumber" />
    <br />
    <InputText placeholder="Option" id="Option" @bind-Value="@student.Option" />
    <br />
    <InputText placeholder="Set" id="Set" @bind-Value="@student.Set" />
    <br />
    <InputText placeholder="City" id="City" @bind-Value="@student.City" />
    <br />
    <button type="submit" class="btn btn-success">Update</button>

    @code {
        private async void HandleUpdate()
        {
            string endpoint = $"{baseUrl}api/students/{student.StudentId}";

            await httpClient.PutAsJsonAsync(endpoint, student);

            await load();
            mode = MODE.None;
            StateHasChanged(); // causes the page to get automatically refreshed
        }
    }
</EditForm>
}

//=============================================== DELETE========================================
@if (students != null && mode == MODE.Delete) // Delete form
{
<EditForm Model="@student" OnValidSubmit="@HandleDelete">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="FirstName" @bind-Value="@student.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="LastName" @bind-Value="@student.LastName" />
    <br />
    <InputText placeholder="BCIT_ID" id="BCIT_ID" @bind-Value="@student.BCIT_ID" />
    <br />
    <InputText placeholder="Email" id="Email" @bind-Value="@student.Email" />
    <br />
    <InputText placeholder="Phone" id="MobileNumber" @bind-Value="@student.MobileNumber" />
    <br />
    <InputText placeholder="Option" id="Option" @bind-Value="@student.Option" />
    <br />
    <InputText placeholder="Set" id="Set" @bind-Value="@student.Set" />
    <br />
    <InputText placeholder="City" id="City" @bind-Value="@student.City" />
    <br />
    <button type="submit" value="Delete" class="btn btn-danger">Delete</button>

    @code {
        protected async void HandleDelete()
        {
            string endpoint = $"{baseUrl}api/students/{student.StudentId}";
            await httpClient.DeleteAsync(endpoint);
            await load();
            mode = MODE.None;
            StateHasChanged(); // causes the page to get automatically refreshed
        }
    }
</EditForm>
}

//============================================================================================
@code {
    Student[] students;
    string baseUrl = "https://localhost:44396/";

    private enum MODE { None, Add, Edit, Delete };
    MODE mode = MODE.None;
    Student s;

    // Add method
    protected void Add()
    {
        mode = MODE.Add;
    }
    // Edit
    protected async Task ShowEdit(string id)
    {
        s = await httpClient.GetFromJsonAsync<Student>($"{baseUrl}api/students/{id}");
        student.StudentId = s.StudentId;
        student.FirstName = s.FirstName;
        student.LastName = s.LastName;
        student.BCIT_ID = s.BCIT_ID;
        student.Email = s.Email;
        student.MobileNumber = s.MobileNumber;
        student.City = s.City;
        student.Option = s.Option;
        student.Set = s.Set;
        mode = MODE.Edit;
    }

    // Del
    protected async Task ShowDelete(string id)
    {
        s = await httpClient.GetFromJsonAsync<Student>($"{baseUrl}api/students/{id}");
        student.StudentId = s.StudentId;
        student.FirstName = s.FirstName;
        student.LastName = s.LastName;
        student.BCIT_ID = s.BCIT_ID;
        student.Email = s.Email;
        student.MobileNumber = s.MobileNumber;
        student.City = s.City;
        student.Option = s.Option;
        student.Set = s.Set;
        mode = MODE.Delete;
    }


    // Onload() =======================================================

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        students = await httpClient.GetFromJsonAsync<Student[]>($"{baseUrl}api/students");
    }
}
